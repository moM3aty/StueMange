@model EditClassViewModel
@{
    ViewData["Title"] = "تعديل الفصل";
}

<div class="page-header">
    <h1 class="page-title">@ViewData["Title"]: @Model.Name</h1>
</div>

<div class="row justify-content-center">
    <div class="col-md-8">
        <div class="card">
            <div class="card-body">
                <form asp-action="EditClass" class="dashboard-form">
                    <input type="hidden" asp-for="Id" />
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                    <div class="mb-3">
                        <label asp-for="Name" class="form-label"></label>
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">المدرسون</label>
                        <div id="tags-input" class="tags-input-wrapper">
                            <!-- Tags will be added here by JS -->
                            <input type="text" id="teacher-search" class="form-control" placeholder="ابحث عن مدرس...">
                        </div>
                        <ul id="teacher-dropdown" class="d-none"></ul>
                        <!-- Hidden inputs to store selected teacher IDs -->
                        <div id="selected-teachers-container"></div>
                        <span asp-validation-for="SelectedTeacherIds" class="text-danger"></span>
                    </div>

                    <div class="mt-4 d-flex justify-content-end gap-2">
                        <a asp-action="ManageClasses" class="btn btn-secondary">إلغاء</a>
                        <button type="submit" class="btn btn-primary">حفظ التعديلات</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        $(document).ready(function () {
            // Correctly serialize the list of all teachers from the MultiSelectList
            const allTeachers = @Html.Raw(Json.Serialize(
                            ((MultiSelectList)Model.TeachersList).Items.Cast<StueMange.Models.Teacher>()
                            .Select(t => new { id = t.Id.ToString(), name = t.ApplicationUser.FullName })
                    ));

        const initialSelectedIds = @Html.Raw(Json.Serialize(Model.SelectedTeacherIds.Select(id => id.ToString())));

            let selectedTeachers = allTeachers.filter(t => initialSelectedIds.includes(t.id));

            const searchInput = $('#teacher-search');
            const dropdown = $('#teacher-dropdown');
            const tagsInput = $('#tags-input');
            const hiddenContainer = $('#selected-teachers-container');

            function renderTags() {
                tagsInput.find('.tag-item').remove();
                selectedTeachers.forEach(teacher => {
                    const tag = $(`<div class="tag-item">${teacher.name}<span class="remove-tag" data-id="${teacher.id}">&times;</span></div>`);
                    tagsInput.prepend(tag);
                });
            }

            function renderHiddenInputs() {
                hiddenContainer.empty();
                selectedTeachers.forEach((teacher, index) => {
                    const hiddenInput = $(`<input type="hidden" name="SelectedTeacherIds[${index}]" value="${teacher.id}" />`);
                    hiddenContainer.append(hiddenInput);
                });
            }

            // Initial render
            renderTags();
            renderHiddenInputs();

            searchInput.on('keyup', function () {
                const query = $(this).val().toLowerCase();
                dropdown.empty().addClass('d-none');

                if (query.length > 0) {
                    const filteredTeachers = allTeachers.filter(t =>
                        t.name.toLowerCase().includes(query) && !selectedTeachers.some(st => st.id === t.id)
                    );

                    if (filteredTeachers.length > 0) {
                        filteredTeachers.forEach(teacher => {
                            dropdown.append(`<li data-id="${teacher.id}" data-name="${teacher.name}">${teacher.name}</li>`);
                        });
                        dropdown.removeClass('d-none');
                    }
                }
            });

            dropdown.on('click', 'li', function () {
                const teacher = {
                    id: $(this).data('id'),
                    name: $(this).data('name')
                };
                selectedTeachers.push(teacher);
                renderTags();
                renderHiddenInputs();
                searchInput.val('').focus();
                dropdown.addClass('d-none');
            });

            tagsInput.on('click', '.remove-tag', function () {
                const idToRemove = $(this).data('id');
                selectedTeachers = selectedTeachers.filter(t => t.id != idToRemove);
                renderTags();
                renderHiddenInputs();
            });

            $(document).on('click', function (e) {
                if (!$(e.target).closest('#tags-input, #teacher-dropdown').length) {
                    dropdown.addClass('d-none');
                }
            });

            $('form').submit(function() {
                renderHiddenInputs();
                return true;
            });
        });
    </script>
}

